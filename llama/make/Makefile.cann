# Build rules for CANN runner
#
# Note: at present we only support a single CANN version

include make/common-defs.make

ifeq ($(OS),windows)
	@echo "CANN does not currently support windows."
	@exit 0
endif

# Check if CANN_INSTALL_DIR is unset or empty, and ASCEND_TOOLKIT_HOME is defined
ifeq ($(strip $(CANN_INSTALL_DIR)),)
    ifneq ($(strip $(ASCEND_TOOLKIT_HOME)),)
        CANN_INSTALL_DIR := $(ASCEND_TOOLKIT_HOME)
        $(info CANN: updated CANN_INSTALL_DIR from ASCEND_TOOLKIT_HOME=$(ASCEND_TOOLKIT_HOME))
    endif
endif

GPU_LIB_DIR_LINUX := $(CANN_INSTALL_DIR)/lib64
GPU_TRANSITIVE_LIBS = $(empty)
GPU_RUNNER_GO_TAGS := cann
GPU_RUNNER_NAME := cann

GPU_COMPILER_LINUX := $(shell X=$$(which g++ 2>/dev/null) && echo $$X)
GPU_COMPILER:=$(GPU_COMPILER_LINUX)
GPU_RUNNER_LIBS_SHORT := ascendcl nnopbase opapi acl_op_compiler ascendc_kernels
GPU_LIBS = $(wildcard $(addsuffix .$(SHARED_EXT),$(addprefix $(GPU_LIB_DIR)/$(SHARED_PREFIX),$(GPU_RUNNER_LIBS_SHORT))))
CANN_DIST_DEPS_DIR = $(abspath $(SRC_DIR)/../dist/$(OS)-$(ARCH)-cann)/lib/ollama
GPU_DIST_DEPS_LIBS = $(sort $(addprefix $(CANN_DIST_DEPS_DIR)/,$(notdir $(GPU_LIBS)) $(notdir $(GPU_TRANSITIVE_LIBS))))
CANN_INCLUDES_DIRS = -I$(abspath $(CANN_INSTALL_DIR)/include) \
                     -I$(abspath $(CANN_INSTALL_DIR)/include/aclnn) \
					 -I$(abspath $(CANN_INSTALL_DIR)/acllib/include)

GPU_COMPILER_FPIC := -fPIC -Wno-unused-function -std=gnu++11
CANN_COMPILER_CXXFLAGS = \
	$(GPU_COMPILER_FPIC) \
	-c \
	-O3 \
	-DGGML_USE_CANN \
	-DGGML_BUILD=1 \
	-DGGML_NATIVE=OFF \
	-DGGML_SCHED_MAX_COPIES=4 \
	-DGGML_USE_LLAMAFILE \
	-DNDEBUG \
	-D_CRT_SECURE_NO_WARNINGS \
	-D_GNU_SOURCE \
	-D_XOPEN_SOURCE=600 \
	-DUSE_PROF_API=1 \
	-std=gnu++14 \
	-Wno-expansion-to-defined \
	-Wno-invalid-noreturn \
	-Wno-ignored-attributes \
	-Wno-pass-failed \
	-Wno-deprecated-declarations \
	-Wno-unused-result \
	$(CANN_INCLUDES_DIRS) \
	-I/home/mnj/models/code/ollama/ollama_tmp/ollama/build/linux/arm64/runners/cann/kernels/include/ascendc_kernels \
	-I.

GPU_COMPILER_CFLAGS_LINUX = $(CFLAGS) -fPIC -D_GNU_SOURCE -std=c11
GPU_COMPILER_CXXFLAGS_LINUX = $(CXXFLAGS) -fPIC -D_GNU_SOURCE $(CANN_COMPILER_CXXFLAGS)

GPU_RUNNER_SRCS := \
	$(wildcard ggml-cann/*.cpp) \
	ggml.c ggml-backend.c ggml-alloc.c ggml-quants.c sgemm.cpp ggml-aarch64.c

GPU_RUNNER_HDRS := \
	$(wildcard ggml-cann/*.h)

# build custom cann kernels
CANN_KERNEL_SRC_DIR := $(abspath $(SRC_DIR)/ggml-cann/kernels)
CANN_BUILD_DIR := $(abspath $(SRC_DIR)/../build/$(OS)/$(ARCH)/runners/$(GPU_RUNNER_NAME))
CANN_KERNEL_BUILD_DIR := $(CANN_BUILD_DIR)/kernels
CANN_KERNEL_CMAKE_FLAGS = -DCANN_INSTALL_DIR=$(CANN_INSTALL_DIR)
GGML_LIB_BUILD_PRE_JOB := $(CANN_BUILD_DIR)/$(SHARED_PREFIX)ascendc_kernels.$(SHARED_EXT)

include make/gpu.make

# MAKEFLAGS += -j1
# $(GPU_RUNNER_NAME): $(CANN_BUILD_DIR)/$(SHARED_PREFIX)ascendc_kernels.$(SHARED_EXT) WAIT
# define cann_kernel_build
$(CANN_BUILD_DIR)/$(SHARED_PREFIX)ascendc_kernels.$(SHARED_EXT):
	@rm -rf $(CANN_KERNEL_BUILD_DIR)
	@-mkdir -p $(CANN_KERNEL_BUILD_DIR)
	$(info CANN_INSTALL_DIR: $(CANN_INSTALL_DIR))
	cmake $(CANN_KERNEL_SRC_DIR) -G "Unix Makefiles" $(CANN_KERNEL_CMAKE_FLAGS) -B $(CANN_KERNEL_BUILD_DIR) -C $(CANN_KERNEL_SRC_DIR)/CMakeLists.txt -DCMAKE_BUILD_TYPE=debug
	cmake --build $(CANN_KERNEL_BUILD_DIR) --config debug
	@-mkdir -p $(DIST_LIB_DIR)
	$(CP) $(CANN_KERNEL_BUILD_DIR)/lib/$(SHARED_PREFIX)ascendc_kernels.$(SHARED_EXT) $(DIST_LIB_DIR)
	$(CP) $(CANN_KERNEL_BUILD_DIR)/lib/$(SHARED_PREFIX)ascendc_kernels.$(SHARED_EXT) /home/mnj/models/code/ollama/ollama_tmp/ollama/llama/build/linux-arm64/runners/cann/

# endef